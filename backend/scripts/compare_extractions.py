# backend/scripts/compare_extractions.py
"""
Script para comparar a extra√ß√£o do script original vs novo script da web
"""

import sys
import os
import json
from extract_fatura_data import process_single_pdf

# Mapeamento de campos entre o script original e o novo
FIELD_MAPPING = {
    # Original -> Novo
    'CPF/CNPJ': 'cpf_cnpj',
    'Consumo (kWh)': 'consumo_kwh',
    'Valor Total': 'valor_total',
    'Saldo (kWh)': 'saldo_kwh',
    'Nome do Cliente': 'nome_cliente',
    'Endere√ßo': 'endereco_cliente',
    'Unidade Consumidora': 'unidade_consumidora',
    'M√™s de Refer√™ncia': 'mes_referencia',
    'Data de Vencimento': 'data_vencimento',
    'Contribui√ß√£o de Ilumina√ß√£o P√∫blica': 'contribuicao_iluminacao',
    'Energia Injetada': 'energia_injetada',
    'Pre√ßo da Energia Injetada': 'preco_energia_injetada',
    'Consumo SCEE': 'consumo_scee',
    'Pre√ßo da Energia Compensada': 'preco_energia_compensada',
    'Pre√ßo do Fio B': 'preco_fio_b',
    'Consumo N√£o Compensado': 'consumo_nao_compensado',
    'Pre√ßo do kWh N√£o Compensado': 'preco_kwh_nao_compensado',
    'Pre√ßo do ADC Bandeira': 'preco_adc_bandeira',
    'Ciclo de Gera√ß√£o': 'ciclo_geracao',
    'UC Geradora': 'uc_geradora',
    'Gera√ß√£o do √öltimo Ciclo': 'geracao_ultimo_ciclo',
    'Leitura Anterior': 'leitura_anterior',
    'Leitura Atual': 'leitura_atual',
    'Quantidade de Dias': 'quantidade_dias'
}

def simulate_original_extraction(pdf_path):
    """
    Simula a extra√ß√£o do script original (leitor.py)
    Na pr√°tica, voc√™ rodaria o leitor.py aqui
    """
    print("‚ö†Ô∏è Para compara√ß√£o completa, rode o leitor.py original e compare com o resultado abaixo")
    
    # Retorna estrutura esperada do script original
    return {
        'CPF/CNPJ': None,
        'Consumo (kWh)': None,
        'Valor Total': None,
        'Saldo (kWh)': None,
        'Nome do Cliente': None,
        'Endere√ßo': None,
        'Unidade Consumidora': None,
        'M√™s de Refer√™ncia': None,
        'Data de Vencimento': None,
        'Contribui√ß√£o de Ilumina√ß√£o P√∫blica': None,
        'Energia Injetada': None,
        'Pre√ßo da Energia Injetada': None,
        'Consumo SCEE': None,
        'Pre√ßo da Energia Compensada': None,
        'Pre√ßo do Fio B': None,
        'Consumo N√£o Compensado': None,
        'Pre√ßo do kWh N√£o Compensado': None,
        'Pre√ßo do ADC Bandeira': None,
        'Ciclo de Gera√ß√£o': None,
        'UC Geradora': None,
        'Gera√ß√£o do √öltimo Ciclo': None,
        'Leitura Anterior': None,
        'Leitura Atual': None,
        'Quantidade de Dias': None
    }

def compare_extractions(pdf_path):
    """Compara as extra√ß√µes entre o script original e o novo."""
    print(f"üîÑ Comparando extra√ß√µes para: {pdf_path}")
    print("=" * 60)
    
    # Extra√ß√£o do novo script
    print("üìÑ Executando novo script de extra√ß√£o...")
    new_result = process_single_pdf(pdf_path)
    
    # Simular extra√ß√£o do script original
    print("üìÑ Simulando script original...")
    original_result = simulate_original_extraction(pdf_path)
    
    print("\nüìä COMPARA√á√ÉO DE RESULTADOS:")
    print("-" * 40)
    
    success_count = 0
    total_count = 0
    
    for original_field, new_field in FIELD_MAPPING.items():
        total_count += 1
        original_value = original_result.get(original_field, 'N/A')
        new_value = new_result.get(new_field, 'N/A')
        
        # Verificar se o novo script extraiu o valor
        if new_value and new_value != 'N/A' and new_value != 'N√£o identificado':
            success_count += 1
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        print(f"{status} {original_field}")
        print(f"    Original: {original_value}")
        print(f"    Novo:     {new_value}")
        print()
    
    # Estat√≠sticas
    success_rate = (success_count / total_count) * 100
    print(f"üìà ESTAT√çSTICAS:")
    print(f"   Campos extra√≠dos: {success_count}/{total_count}")
    print(f"   Taxa de sucesso: {success_rate:.1f}%")
    
    # Campos extras no novo script
    extra_fields = []
    for field in new_result.keys():
        if field not in FIELD_MAPPING.values() and field not in ['arquivo_processado', 'status']:
            extra_fields.append(field)
    
    if extra_fields:
        print(f"\nüÜï CAMPOS EXTRAS NO NOVO SCRIPT:")
        for field in extra_fields:
            value = new_result.get(field, 'N/A')
            print(f"   {field}: {value}")
    
    # An√°lise de qualidade
    print(f"\nüéØ AN√ÅLISE DE QUALIDADE:")
    
    critical_fields = ['unidade_consumidora', 'cpf_cnpj', 'valor_total', 'mes_referencia']
    critical_extracted = sum(1 for field in critical_fields if new_result.get(field))
    
    print(f"   Campos cr√≠ticos extra√≠dos: {critical_extracted}/{len(critical_fields)}")
    
    if critical_extracted == len(critical_fields):
        print("   üü¢ Extra√ß√£o EXCELENTE - Todos os campos cr√≠ticos extra√≠dos")
    elif critical_extracted >= len(critical_fields) * 0.75:
        print("   üü° Extra√ß√£o BOA - Maioria dos campos cr√≠ticos extra√≠dos")
    else:
        print("   üî¥ Extra√ß√£o PRECISA MELHORAR - Poucos campos cr√≠ticos extra√≠dos")
    
    return new_result, success_rate

def generate_improvement_suggestions(result, success_rate):
    """Gera sugest√µes de melhoria baseadas nos resultados."""
    print(f"\nüí° SUGEST√ïES DE MELHORIA:")
    print("-" * 30)
    
    if success_rate < 50:
        print("üîß Taxa de extra√ß√£o baixa. Verificar:")
        print("   - Qualidade do PDF (texto vs imagem)")
        print("   - Padr√µes de regex muito espec√≠ficos")
        print("   - Necessidade de OCR")
    
    # Verificar campos espec√≠ficos
    missing_critical = []
    critical_fields = {
        'unidade_consumidora': 'Unidade Consumidora',
        'cpf_cnpj': 'CPF/CNPJ',
        'valor_total': 'Valor Total',
        'mes_referencia': 'M√™s de Refer√™ncia'
    }
    
    for field, name in critical_fields.items():
        if not result.get(field):
            missing_critical.append(name)
    
    if missing_critical:
        print(f"‚ö†Ô∏è  Campos cr√≠ticos n√£o extra√≠dos:")
        for field in missing_critical:
            print(f"   - {field}")
        print("   Sugest√£o: Revisar padr√µes regex para estes campos")
    
    # Verificar campos de energia solar
    solar_fields = ['energia_injetada', 'consumo_scee', 'saldo_kwh']
    solar_extracted = sum(1 for field in solar_fields if result.get(field) and result.get(field) != '0')
    
    if solar_extracted == 0:
        print("üåû Nenhum campo de energia solar extra√≠do")
        print("   Poss√≠veis causas:")
        print("   - Fatura n√£o √© de energia solar")
        print("   - Padr√µes regex precisam ser ajustados")
    
    # Verificar valores monet√°rios
    financial_fields = ['preco_energia_injetada', 'preco_energia_compensada', 'contribuicao_iluminacao']
    financial_extracted = sum(1 for field in financial_fields if result.get(field) and result.get(field) != '0')
    
    if financial_extracted < len(financial_fields) * 0.5:
        print("üí∞ Poucos valores financeiros extra√≠dos")
        print("   Sugest√£o: Verificar padr√µes para valores monet√°rios")
    
    print("\nüîß MELHORIAS RECOMENDADAS:")
    print("1. Testar com mais faturas para validar padr√µes")
    print("2. Adicionar padr√µes alternativos para campos que falharam")
    print("3. Implementar valida√ß√£o cruzada dos dados extra√≠dos")
    print("4. Considerar usar machine learning para extra√ß√£o")

def main():
    """Fun√ß√£o principal."""
    if len(sys.argv) != 2:
        print("‚ùå Uso: python compare_extractions.py <caminho_do_pdf>")
        print("\nExemplo:")
        print("  python compare_extractions.py ../faturas/fatura_exemplo.pdf")
        sys.exit(1)
    
    pdf_path = sys.argv[1]
    
    if not os.path.exists(pdf_path):
        print(f"‚ùå Arquivo n√£o encontrado: {pdf_path}")
        sys.exit(1)
    
    try:
        result, success_rate = compare_extractions(pdf_path)
        generate_improvement_suggestions(result, success_rate)
        
        print(f"\nüìÑ RESULTADO COMPLETO (JSON):")
        print("-" * 40)
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
    except Exception as e:
        print(f"‚ùå Erro durante a compara√ß√£o: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()